---
# tasks file for role_gpu
- name: Parse nvidia-smi output
  ansible.builtin.shell:
    cmd: set -o pipefail && nvidia-smi -x -q | xq ".nvidia_smi_log.gpu"
  environment:
    PATH: "{{ env_path }}"
  args:
    executable: /bin/zsh
  register: nvidia_smi
  changed_when: false

- name: Get Nvidia driver version
  ansible.builtin.shell:
    cmd: set -o pipefail && modinfo nvidia | grep -oP '(?<=^version:).*' | head -n1 | tr -d ' '
  environment:
    PATH: "{{ env_path }}"
  args:
    executable: /bin/zsh
  register: nvidia_driver
  changed_when: false

- name: Get installed Cuda versions
  ansible.builtin.shell:
    cmd: set -o pipefail && dpkg -l | grep -oP '(?<=cuda-toolkit-)[0-9]+-[0-9]+' | uniq
  environment:
    PATH: "{{ env_path }}"
  args:
    executable: /bin/zsh
  register: cuda_versions
  changed_when: false

- name: Get installed Cudnn versions
  ansible.builtin.shell:
    cmd: set -o pipefail && dpkg -l | grep -oP '(?<=cudnn[0-9])\ +[A-z0-9.\-\+]+' | tr -d ' ' | uniq
  environment:
    PATH: "{{ env_path }}"
  args:
    executable: /bin/zsh
  register: cudnn_versions
  changed_when: false

- name: Set fact for nvidia-smi
  ansible.builtin.set_fact:
    nvidia_smi: "{{ nvidia_smi.stdout | from_json }}"

- name: Set fact for GPU info
  ansible.builtin.set_fact:
    gpu_type: "{{ [nvidia_smi | json_query(gpu_type_query)] | flatten }}"
    gpu_mem_usage: "{{ [nvidia_smi | json_query(gpu_mem_usage_query)] | flatten }}"
    gpu_freq: "{{ [nvidia_smi | json_query(gpu_freq_query)] | flatten }}"
    gpu_temp: "{{ [nvidia_smi | json_query(gpu_temp_query)] | flatten }}"
    gpu_util: "{{ [nvidia_smi | json_query(gpu_util_query)] | flatten }}"
    gpu_processes: "{{ [nvidia_smi | json_query(gpu_processes_query)] | flatten | list }}"
    nvidia_driver: "{{ nvidia_driver.stdout }}"
    cuda_versions: "{{ cuda_versions.stdout | replace('-', '.') | split('\n') }}"
    cudnn_versions: "{{ cudnn_versions.stdout | replace('-', '.') | split('\n') }}"
    cacheable: "yes"
  vars:
    gpu_type_query: "product_name || [*].product_name"
    gpu_mem_usage_query: "fb_memory_usage || [*].fb_memory_usage"
    gpu_freq_query: "clocks || [*].clocks"
    gpu_temp_query: "temperature.gpu_temp || [*].temperature.gpu_temp"
    gpu_util_query: "utilization || [*].utilization"
    gpu_processes_query: "processes || [*].processes"

- name: Set facts
  ansible.builtin.set_fact:
    gpu_proc_ids: "{{ gpu_processes | json_query('[*].process_info[*].pid || [*].process_info.pid') }}"

- name: Print info
  ansible.builtin.debug:
    var: gpu_proc_ids

# https://man7.org/linux/man-pages/man1/ps.1.html
# AIX FORMAT DESCRIPTORS:
#   This ps supports AIX format descriptors, which work somewhat like
#   the formatting codes of printf(1) and printf(3).  For example,
#   the normal default output can be produced with this: ps -eo "%p
#   %y %x %c".  The NORMAL codes are described in the next section.
#   CODE   NORMAL   HEADER
#   %C     pcpu     %CPU
#   %G     group    GROUP
#   %P     ppid     PPID
#   %U     user     USER
#   %a     args     COMMAND
#   %c     comm     COMMAND
#   %g     rgroup   RGROUP
#   %n     nice     NI
#   %p     pid      PID
#   %r     pgid     PGID
#   %t     etime    ELAPSED
#   %u     ruser    RUSER
#   %x     time     TIME
#   %y     tty      TTY
#   %z     vsz      VSZ

- name: Grab processes' information from process ids
  ansible.builtin.shell:
    cmd: ps --no-headers -p "{{ item }}" -o "%U," -o lstart -o ",%t,%a"
  environment:
    PATH: "{{ env_path }}"
  args:
    executable: /bin/zsh
  with_items: "{{ gpu_proc_ids }}"
  register: process_info
  changed_when: false
  failed_when: false

- name: Set facts
  ansible.builtin.set_fact:
    process_info_dict: "{{ _dict }}"
  vars:
    _result: "{{ dict(process_info.results | json_query('[?rc == `0`].[item, stdout]')) }}"
    _proc_id: "{{ _result.keys() | list }}"
    _proc_info: "{{ _result.values() | map('regex_replace', '\"', '') | list }}"
    _dict: "{{ dict(_proc_id|zip(_proc_info)) }}"

- name: Get the current date and time with timezone
  ansible.builtin.command: "date '+%Y-%m-%d %H:%M:%S %z'"
  register: current_datetime
  delegate_to: localhost
  run_once: true
  changed_when: false

- name: Output Lab Machine Statuses html file
  ansible.builtin.template:
    src: lab_machine_status.html.j2
    dest: lab_machine_status.html
    mode: "0664"
  delegate_to: localhost
  run_once: true
  changed_when: false

- name: Output Lab Machine Statuses yml file
  ansible.builtin.template:
    src: lab_machine_status.yml.j2
    dest: internal-web-page/public/lab_machine_status.yml
    mode: "0664"
  delegate_to: localhost
  run_once: true
  changed_when: false

- name: Create directory to store the internal web page
  become: true
  ansible.builtin.file:
    path: /internal_web
    owner: ansible
    group: ansible
    mode: "0755"
    state: directory
  delegate_to: "{{ groups['lab_internal_web_host'][0] }}"
  run_once: true

- name: Copy the files over to the internal web page
  become: true
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /internal_web
    owner: ansible
    group: ansible
    mode: "0755"
  with_items:
    - "internal-web-page/pages"
    - "internal-web-page/public"
    - "internal-web-page/styles"
    - "internal-web-page/.eslintrc.json"
    - "internal-web-page/.gitignore"
    - "internal-web-page/next-env.d.ts"
    - "internal-web-page/next.config.js"
    - "internal-web-page/package.json"
    - "internal-web-page/README.md"
    - "internal-web-page/tsconfig.json"
  delegate_to: "{{ groups['lab_internal_web_host'][0] }}"
  run_once: true

- name: Get previous `npm run start` process if it's running
  become: true
  community.general.pids:
    pattern: (node|npm)\s+(.*)\s+start.*
  register: npm_run_start_pids
  delegate_to: "{{ groups['lab_internal_web_host'][0] }}"
  run_once: true

- name: Showing npm run start pids
  ansible.builtin.debug:
    var: npm_run_start_pids
  delegate_to: "{{ groups['lab_internal_web_host'][0] }}"
  run_once: true

- name: Rebuild webpage # noqa: key-order[task] literal-compare
  block:
    - name: End these process before building and starting it back up
      become: true
      ansible.builtin.command:
        cmd: kill {{ item }}
      with_items: "{{ npm_run_start_pids.pids }}"
      delegate_to: "{{ groups['lab_internal_web_host'][0] }}"
      run_once: true
      failed_when: false
      changed_when: false

    - name: Run `npm install` to install the node_modules in package.json
      become: true
      ansible.builtin.shell:
        cmd: "cd /internal_web && npm install"
      delegate_to: "{{ groups['lab_internal_web_host'][0] }}"
      run_once: true
      changed_when: true

    - name: Run `next build` to build the webpage up
      become: true
      ansible.builtin.shell:
        cmd: "cd /internal_web && ./node_modules/next/dist/bin/next build"
      delegate_to: "{{ groups['lab_internal_web_host'][0] }}"
      run_once: true
      changed_when: true
      # async: 60
      # poll: 5

    - name: Start the webpage at port 3000 using `forever`
      become: true
      ansible.builtin.shell:
        cmd: "cd /internal_web && ./node_modules/forever/bin/forever start -c 'npm run start' ./"
        executable: /bin/bash
      delegate_to: "{{ groups['lab_internal_web_host'][0] }}"
      run_once: true
      changed_when: true
  when: is_rebuild_webpage | bool == true
